/**
 * @input A : Integer array
 * @input n1 : Integer array's ( A ) length
 * 
 * @Output Integer
 */
struct stack {
    int value;
    struct stack *next;
};

void push(struct stack **head, int d)
{
    struct stack *node = (struct stack *)malloc(sizeof(struct stack));
    node->value=d;
    node->next=*head;
    *head=node;
}

void pop(struct stack **head)
{
    struct stack *curr=*head;
    *head = curr->next;
}

int isempty(struct stack **head)
{
    if(*head == NULL)
        return 1;
    return 0;
}

int top(struct stack **head)
{
    struct stack *curr=*head;
    return curr->value;
}


int largestRectangleArea(int* A, int n1) {
    struct stack *head = NULL;
    int x,d,ans=0,max = 0;
    int i=0;
    
    if(n1==1)
        return A[0];
    
    while(i<n1)
    {
        if(isempty(&head) || A[i] >= A[top(&head)])
            push(&head,i++);
        
        else{
                x=A[top(&head)];
                pop(&head);
                if(isempty(&head))
                    d=i;
                else
                    d=i-top(&head)-1;
                ans=x*d;
                if(ans>max)
                    max=ans;
        }
    }
    
    while(!isempty(&head))
    {
        x=A[top(&head)];
        pop(&head);
        if(isempty(&head))
            d=i;
        else
            d=i-top(&head)-1;
        ans=x*d;
        if(ans>max)
            max=ans;
        
    }
    
    return max;
    
}
